<?php

namespace App\Provider;

use App\Entity\User;
use App\Exception\LoginDataProviderNoDataException;
use App\Notifications\Notificator;
use App\Subscriber\Subscriber;
use Doctrine\ORM\NonUniqueResultException;
use FOS\UserBundle\Model\UserManagerInterface;
use FOS\UserBundle\Util\TokenGeneratorInterface;
use HWI\Bundle\OAuthBundle\OAuth\Response\UserResponseInterface;
use HWI\Bundle\OAuthBundle\Security\Core\User\FOSUBUserProvider as BaseClass;
use Symfony\Component\Security\Core\User\UserInterface;

class FOSUBUserProvider extends BaseClass
{
    /**
     * @var TokenGeneratorInterface
     */
    private $tokenGenerator;

    /**
     * @var Notificator
     */
    private $notificator;

    /**
     * @var Subscriber
     */
    private $subscriber;

    /**
     * FOSUBUserProvider constructor.
     *
     * @param UserManagerInterface $userManager
     * @param TokenGeneratorInterface $tokenGenerator
     * @param Notificator $notificator
     * @param Subscriber $subscriber
     * @param array $properties
     */
    public function __construct(
        UserManagerInterface $userManager,
        TokenGeneratorInterface $tokenGenerator,
        Notificator $notificator,
        Subscriber $subscriber,
        array $properties
    )
    {
        parent::__construct($userManager, $properties);
        $this->tokenGenerator = $tokenGenerator;
        $this->notificator = $notificator;
        $this->subscriber = $subscriber;
    }

    /**
     * {@inheritdoc}
     */
    public function connect(UserInterface $user, UserResponseInterface $response)
    {
        $property = $this->getProperty($response);
        $username = $response->getUsername();
        //on connect - get the access token and the user ID
        $service = $response->getResourceOwner()->getName();
        $setter = 'set'.ucfirst($service);
        $setter_id = $setter.'Id';
        $setter_token = $setter.'AccessToken';
        //we "disconnect" previously connected users
        if (null !== $previousUser = $this->userManager->findUserBy(array($property => $username))) {
            $previousUser->$setter_id(null);
            $previousUser->$setter_token(null);
            $this->userManager->updateUser($previousUser);
        }
        //we connect current user
        $user->$setter_id($username);
        $user->$setter_token($response->getAccessToken());
        $this->userManager->updateUser($user);
    }

    /**
     * {@inheritdoc}
     * @param UserResponseInterface $response
     * @return User|\FOS\UserBundle\Model\UserInterface|null
     * @throws LoginDataProviderNoDataException
     * @throws NonUniqueResultException
     */
    public function loadUserByOAuthUserResponse(UserResponseInterface $response)
    {
        $service = $response->getResourceOwner()->getName();
        $username = $response->getEmail();
        $firstName = $response->getFirstName() ?? '';
        $lastName = $response->getLastName() ?? '';
        $data = $response->getData();
        $profilePicture = $data['picture']['data']['url'] ?? null;
        if (null === $profilePicture) {
            $profilePicture = $response->getProfilePicture(); //facebook
        }
        if ('' == $firstName && '' === $lastName) {
            $firstName = $data['name'] ?? ''; // github
        }

        if (!isset($data['id'])) {
            throw new LoginDataProviderNoDataException('There is no id in response data from '.$service);
        }
        $id = $data['id'];
        $user = $this->userManager->findUserBy(array($this->getProperty($response) => $id));

        if (null === $user) {
            $setter = 'set'.ucfirst($service);
            $setter_id = $setter.'Id';
            $setter_token = $setter.'AccessToken';

            if (!$user = $this->userManager->findUserByUsername($username)) {
                /** @var User $user */
                $user = $this->userManager->createUser();
                $user->setUsername($username);
                $user->setEmail($username);
                $user->setFirstName($firstName);
                $user->setLastName($lastName);
                $user->setProfilePicture($profilePicture);
                $user->setPlainPassword($this->tokenGenerator->generateToken());
                $user->setPasswordAutoGenerated(true);
                $user->setEnabled(true);
                $this->userManager->updateUser($user);
                $this->notificator->registrationSuccess($user);
                $this->subscriber->subscribeToDigest($user);
            }

            $user->$setter_id($id);
            $user->$setter_token($response->getAccessToken());

            return $user;
        }

        $serviceName = $response->getResourceOwner()->getName();
        $setter = 'set'.ucfirst($serviceName).'AccessToken';
        $user->$setter($response->getAccessToken());

        return $user;
    }
}
